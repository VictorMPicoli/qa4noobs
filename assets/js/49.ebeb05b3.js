(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{340:function(e,a,o){"use strict";o.r(a);var s=o(13),i=Object(s.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"tdd-test-driven-development"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tdd-test-driven-development"}},[e._v("#")]),e._v(" "),a("strong",[e._v("TDD - Test Driven Development")])]),e._v(" "),a("h2",{attrs:{id:"o-que-e-o-tdd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#o-que-e-o-tdd"}},[e._v("#")]),e._v(" "),a("em",[e._v("O que é o TDD")])]),e._v(" "),a("p",[e._v("É uma abordagem para desenvolvimento de software em que os casos de teste são desenvolvidos para especificar e validar o que o código fará. Em termos simples, casos de teste para cada funcionalidade são criados e testados primeiro, caso falhem, então o novo código é escrito de forma a passar pelo teste, gerando um código simples e livre de bugs.")]),e._v(" "),a("img",{attrs:{src:"https://www.guru99.com/images/8-2016/081216_0811_TestDrivenD1.png",alt:"Fluxograma TDD"}}),e._v(" "),a("p",[e._v("O Test-Driven Development se inicia com o design e desenvolvimento de testes para cada funcionalidade de um aplicativo. A estrutura TDD instrúi desenvolvedores a escreverem código novo apenas caso um teste automatizado falhe, isto evita a duplicação de códigos, já que apenas uma pequena quantidade de código é escrita por vez, com o objetivo de passar nos testes.")]),e._v(" "),a("p",[e._v("O conceito simples do TDD é escrever e corrigir casos falhos "),a("em",[e._v("antes")]),e._v(" de escrever código novo.")]),e._v(" "),a("p",[e._v("O TDD é um processo de desenvolver e aplicar testes automatizados antes do desenvolvimento da aplicação propriamente dita.")]),e._v(" "),a("h2",{attrs:{id:"como-aplicar-o-tdd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#como-aplicar-o-tdd"}},[e._v("#")]),e._v(" "),a("em",[e._v("Como Aplicar o TDD")])]),e._v(" "),a("br"),e._v(" "),a("ol",[a("li",[e._v("Adicione um teste.")]),e._v(" "),a("li",[e._v("Execute todos os teste e observe se quaisquer deles falham.")]),e._v(" "),a("li",[e._v("Escreva mais código.")]),e._v(" "),a("li",[e._v("Execute testes e refatore o código.")]),e._v(" "),a("li",[e._v("Repita.")])]),e._v(" "),a("img",{attrs:{src:"https://www.guru99.com/images/8-2016/081216_0811_TestDrivenD2.png",alt:"Fluxograma de Aplicação do TDD"}}),e._v(" "),a("br"),e._v(" "),a("br"),e._v(" "),a("h2",{attrs:{id:"tdd-vs-testagem-tradicional"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tdd-vs-testagem-tradicional"}},[e._v("#")]),e._v(" "),a("em",[e._v("TDD vs Testagem Tradicional")])]),e._v(" "),a("p",[e._v("A abordagem TDD é primariamente uma técnica de especificação, que garante testagem satisfatória do código fonte.")]),e._v(" "),a("ul",[a("li",[e._v("Nos testes tradicionais, um teste que obteve sucesso encontrará um ou mais defeitos. Também é assim no TDD, caso um teste falhe, você gerou progresso já que identificou correções necessárias.")]),e._v(" "),a("li",[e._v("TDD garante que o sistema atenda de fato as regras de negócio definidas para ele. Isto auxilia a construir confiança no sistema.")]),e._v(" "),a("li",[e._v("O TDD foca predominantemente na produção de código que valide que os testes irão funcionar apropriadamente. Nas técnicas tradicionais, maior enfoque recai sobre o design dos casos de testes.")]),e._v(" "),a("li",[e._v("Na modalidade TDD, é atingida cobertura de testes total. Cada linha de código individual é testada, diferentemente da modalidade tradicional.")]),e._v(" "),a("li",[e._v("A combinação de ambas as abordagens leva a importância de testar o sistema, em detrimento de uma perfeição geral da aplicação")]),e._v(" "),a("li",[e._v('Na metodologia Ágil, o objetivo é "testar com propósito". Deve-se saber o motivo de testar algo e até que nível os testes são necessários.')])]),e._v(" "),a("h2",{attrs:{id:"o-que-e-tdd-de-aceite-e-tdd-do-desenvolvedor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#o-que-e-tdd-de-aceite-e-tdd-do-desenvolvedor"}},[e._v("#")]),e._v(" "),a("em",[e._v("O que é TDD de Aceite e TDD do Desenvolvedor")])]),e._v(" "),a("ol",[a("li",[e._v("Acceptance TDD(ATDD): Com o ATDD, escreve-se apenas um único teste de aceite, que atende aos requerimentos da especificação ou satisfaça o comportamento do sistema. Após, escreva código suficiente para atender ao teste de aceite.\nO teste de aceite foca no comportamento geral do sistema, sendo também conhecido como Desenvolvimento Liderado pelo Comportamento(Behavioral Driven Development).")]),e._v(" "),a("li",[e._v("Developer TDD: Com o TDD de Desenvolvedor, um unico teste de developer é escrito, um teste Unitário, e em seguida, código suficiente para atender ao teste. O teste unitário foca em cada funcionalidade do sistema. Simplesmente chamada de TDD.")])]),e._v(" "),a("br"),e._v(" "),a("p",[e._v("O objetivo principal do ATDD e TDD é especificar requerimentos detalhados e executáveis para a solução em uma base de "),a("em",[e._v("Just In Time")]),e._v(" (JIT). JIT significa levar apenas os requerimentos necessários para o sistema em consideração, de forma a aumentar a eficiência.")]),e._v(" "),a("img",{attrs:{src:"https://www.guru99.com/images/8-2016/081216_0811_TestDrivenD3.png",alt:"Fluxograma ATDD/TDD"}}),e._v(" "),a("br"),e._v(" "),a("h2",{attrs:{id:"escalando-o-tdd-atraves-do-agile-model-driven-develipment-amdd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#escalando-o-tdd-atraves-do-agile-model-driven-develipment-amdd"}},[e._v("#")]),e._v(" "),a("em",[e._v("Escalando o TDD Através do Agile Model Driven Develipment (AMDD)")])]),e._v(" "),a("p",[e._v("O TDD é muito bom em validações e especificações detalhadas, mas falha em considerar problemas maiores como design geral, uso do sistema e UI. AMDD trata dos problemas de escalabilidade Ágil em que o TDD falha.")]),e._v(" "),a("p",[e._v("Portanto, AMDD é aplicado para problemas maiores.")]),e._v(" "),a("img",{attrs:{src:"https://www.guru99.com/images/8-2016/081216_0811_TestDrivenD4.png",alt:"Explicação do Funcionamento AMDD"}}),e._v(" "),a("p",[e._v("No AMDD, modelos extensos são criados antes que o código fonte seja escrito.")]),e._v(" "),a("p",[e._v("Cada caixa na figura acima representa uma atividade de desenvolvimento.")]),e._v(" "),a("p",[e._v("Visualização é um dos processos TDD de previsão/imaginação dos testes que serão aplicados durante a primeira semana de projet. O objetivo principal da visualização é identificar o escopo e arquitetura do sistema. Requerimentos de alto nivel e modelagem de arquitetura são feitas para uma visualização eficiente.")]),e._v(" "),a("p",[e._v("É o processo em que não desenvolve-se uma especificação detalhada do sistema ou software, mas sim, exploram-se os requerimentos que definem a estratégia geral do projeto.")]),e._v(" "),a("ul",[a("li",[a("p",[a("em",[e._v("Iteração 0:  Visualização")])]),e._v(" "),a("ol",[a("li",[e._v("Visualização de Requerimentos Iniciais: Pode levar tempo para identificar requerimentos de alto nível e o escopo do projeto. O foco principal é explorar os modelos de uso, modelo de domínio inicial e modelo de UI.")]),e._v(" "),a("li",[e._v("Visualização de Arquitetura Inicial: Também pode ser dispendioso identificar a arquitetura do sistema, que permite definir as diretrizes técnicas do projeto. O foco é explorar diagramas de tecnologia, fluxo de UI, modelos de domínio e casos de Mudança.")])])])]),e._v(" "),a("br"),e._v(" "),a("ul",[a("li",[a("em",[e._v("Iteração de Modelagem:")]),e._v(" Aqui, o time deve planejar o trabalho que será desenvolvido em cada iteração.\n"),a("ul",[a("li",[e._v("O processo Ágil é utilizado em cada iteração, ou seja, para cada iteração novos itens de trabalho serão adicionados com prioridade.")]),e._v(" "),a("li",[e._v("Trabalhos priorizados serão levados em consideração primeiro. Work Items adicionados podem ser repriorizados ou removidos da pilha de itens a qualquer momento.")]),e._v(" "),a("li",[e._v("O time debate ocmo irão implementar cada requerimento. A modelagem é aplicada para este propósito.")]),e._v(" "),a("li",[e._v("Análise de modelo e design são feitos para cada requerimento que será implementado naquela iteração.")])])])]),e._v(" "),a("br"),e._v(" "),a("ul",[a("li",[a("em",[e._v("Model Storming:")]),e._v(" Também conhecida como modelagem Just in Time (JIT).\n"),a("ul",[a("li",[e._v("Aqui, a sessão de modeling envolve um itme de 2/3 membros que debatem problemas.")]),e._v(" "),a("li",[e._v("Um membro do time irá pedir a outro para que modelem juntos. Esta sessão irã levar de 5 a 10 minutos, onde membros da equipe juntam-se para compartilhar informações.")]),e._v(" "),a("li",[e._v("Eles exploram problemas até que não possam encontrar a causa principal do problema. Just in Time, caso um membro da equipe identifique o problema que deseja solucionar,  irá receber pronto auxílio dos demais membros.")]),e._v(" "),a("li",[e._v("Outros membros do grupo irão explorar o problema, para que então, todos continuem como estavam antes. Este processo também é chamado de modelagem Stand-Up, ou Customer QA Sessions.")])])])]),e._v(" "),a("br"),e._v(" "),a("ul",[a("li",[a("p",[a("em",[e._v("Test Driven Develipment (TDD)")])]),e._v(" "),a("ul",[a("li",[e._v("Promove testagem confirmatória do código com especificações detalhadas.")]),e._v(" "),a("li",[e._v("Tanto testes de aceite quanto testes unitários são inputs para o TDD;")]),e._v(" "),a("li",[e._v("TDD torna o código mais simples e claro. Ele permite que o desenvolvedor tenha que manter menos documentação.")])])]),e._v(" "),a("li",[a("p",[a("em",[e._v("Revisões")])]),e._v(" "),a("ul",[a("li",[e._v("São opcionais, incluem inspeções de código e revisões de modelo.")]),e._v(" "),a("li",[e._v("Isto pode ser feito para cada iteração ou para o projeto inteiro.")]),e._v(" "),a("li",[e._v("Constiue boa opção para prover feedback ao projeto.")])])])]),e._v(" "),a("h2",{attrs:{id:"test-driven-development-tdd-vs-agile-model-driven-development-amdd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-driven-development-tdd-vs-agile-model-driven-development-amdd"}},[e._v("#")]),e._v(" *Test Driven Development (TDD) Vs. Agile Model Driven Development (AMDD)")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("TDD:")]),e._v(" "),a("ul",[a("li",[e._v("O TDD encurta o loop de feedback de programação.")]),e._v(" "),a("li",[e._v("TDD é especificação detalhada.")]),e._v(" "),a("li",[e._v("TDD promove o desenvolvimento de códigos de alta qualidade.")]),e._v(" "),a("li",[e._v("TDD comunica-se com programadores.")]),e._v(" "),a("li",[e._v("TDD não é visualmente orientado.")]),e._v(" "),a("li",[e._v("Possui escopo limitado para trabalhos de software.")]),e._v(" "),a("li",[e._v("Ambos apoiam o desenvolvimento evolucionário.")])])]),e._v(" "),a("li",[a("p",[e._v("AMDD:")]),e._v(" "),a("ul",[a("li",[e._v("Encurta o loop de feedback da modelagem.")]),e._v(" "),a("li",[e._v("Funciona para problemas maiores.")]),e._v(" "),a("li",[e._v("Promove comunicação de alta qualidade entre investidores e desenvolvedores.")]),e._v(" "),a("li",[e._v("AMDD comunica-se com analistas de business, investidores e profissionais de dados.")]),e._v(" "),a("li",[e._v("É orientado visualmente.")]),e._v(" "),a("li",[e._v("Possui escopo amblo incluindo investidores. Envolve trabalhar em prol de um entendimento em comum.")])])])]),e._v(" "),a("h2",{attrs:{id:"exemplo-de-tdd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exemplo-de-tdd"}},[e._v("#")]),e._v(" "),a("em",[e._v("Exemplo de TDD")])]),e._v(" "),a("p",[e._v("No exemplo, definiremos uma classe de senha. Para esta classe, tentaremos satisfazer as seguintes condições de aceite:")]),e._v(" "),a("ul",[a("li",[e._v("Deve possuir entre 5 e 10 caracteres.")])]),e._v(" "),a("p",[e._v("Primeiro, escrevemos o código que atende aos requerimentos acima.")]),e._v(" "),a("br"),e._v(" "),a("img",{attrs:{src:"https://www.guru99.com/images/8-2016/081216_0811_TestDrivenD5.png",alt:"Exemplo de Código para Exemplificação TDD"}}),e._v(" "),a("br"),e._v(" "),a("p",[a("em",[e._v("Cenário 1")]),e._v(": Para executar o teste, criamos a classe PasswordValidator():")]),e._v(" "),a("br"),e._v(" "),a("img",{attrs:{src:"https://www.guru99.com/images/8-2016/081216_0811_TestDrivenD6.png",alt:"Exemplo Cenário 1"}}),e._v(" "),a("br"),e._v(" "),a("p",[e._v("Iremos executar a clase TestPassword() acima.")]),e._v(" "),a("p",[e._v("Output é PASSED como demonstrado abaixo:")]),e._v(" "),a("p",[a("em",[e._v("Output")]),e._v(":")]),e._v(" "),a("br"),e._v(" "),a("img",{attrs:{src:"https://www.guru99.com/images/8-2016/081216_0811_TestDrivenD7.png",alt:"Resultado Cenário 1"}}),e._v(" "),a("br"),e._v(" "),a("p",[e._v("Cenário 2: Aqui podemos ver que no método "),a("em",[e._v("TestPasswordLength()")]),e._v(" não há necessidade de criar uma intância da classe "),a("em",[e._v("PasswordValidator")]),e._v(". Instância significa criar um objeto de clase para referir-se aos membros (variáveis/métodos) desta classe.")]),e._v(" "),a("br"),e._v(" "),a("img",{attrs:{src:"https://www.guru99.com/images/8-2016/081216_0811_TestDrivenD8.png",alt:"Exemplo Cenário 2"}}),e._v(" "),a("br"),e._v(" "),a("p",[e._v("Iremos remover a classe "),a("em",[e._v("PasswordValidator pv=new PasswordValidator()")]),e._v(" do código. Podemos chamar o método "),a("em",[e._v("isValid()")]),e._v(" diretamente através do "),a("em",[e._v('PasswordValidator. iSvALID("Abs123")')]),e._v(".")]),e._v(" "),a("p",[e._v("Então refatoramos da seguinte forma:")]),e._v(" "),a("br"),e._v(" "),a("img",{attrs:{src:"https://www.guru99.com/images/8-2016/081216_0811_TestDrivenD9.png",alt:"Exemplo Refatoração"}}),e._v(" "),a("br"),e._v(" "),a("p",[a("em",[e._v("Cenário 3")]),e._v(": Após refatorar o output demonstra status de falha, isto ocorre pois removemos a instância, portando não existe referencia para o método não estático isValid().")]),e._v(" "),a("br"),e._v(" "),a("img",{attrs:{src:"https://www.guru99.com/images/8-2016/081216_0811_TestDrivenD10.png",alt:"Exemplo Cenário 3"}}),e._v(" "),a("br"),e._v(" "),a("p",[e._v('Então precisamos alterar este método com a adição da palavra "static" antes da booleana como public static boolean isValid (String password). Refatorando a classe PasswordValidator() para remover o erro acima e passar no teste:')]),e._v(" "),a("br"),e._v(" "),a("img",{attrs:{src:"https://www.guru99.com/images/8-2016/081216_0811_TestDrivenD11.png",alt:"Exemplificação cenário 3_2"}}),e._v(" "),a("br"),e._v(" "),a("p",[a("em",[e._v("Output")]),e._v(":")]),e._v(" "),a("p",[e._v("Após as alterações na classe PassValidator() se executarmos o teste o output sera PASSED como demonstrado abaixo:")]),e._v(" "),a("br"),e._v(" "),a("img",{attrs:{src:"https://www.guru99.com/images/8-2016/081216_0811_TestDrivenD12.png",alt:"Exemplo Output Passed"}}),e._v(" "),a("br"),e._v(" "),a("h2",{attrs:{id:"vantagens-do-tdd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vantagens-do-tdd"}},[e._v("#")]),e._v(" "),a("em",[e._v("Vantagens do TDD")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Notificação de Bugs Antecipada:")]),e._v(" "),a("ul",[a("li",[e._v("Devs podem testar seu código no mundo da database, isto consiste, geralmente, de testes manuais ou scripts individuais. Usando o TDD você constrói de baixo para cima, ao longo do tempo, uma bateria de testes automatizados que você ou qualquer outro desenvolvedor podem executar a qualquer momento.")])])]),e._v(" "),a("li",[a("p",[e._v("Código mais Limpo, Extensível e com Melhor Design:")]),e._v(" "),a("ul",[a("li",[e._v("Isto auxilia a entender como o código será usado e como isso interage com outros módulos.")]),e._v(" "),a("li",[e._v("Resulta em um melhores decisões de design, e um código que permite melhor manutenção.")]),e._v(" "),a("li",[e._v("TDD permite escreve códigos menores, com responsabilidades simples, ao invés de procedimentos monolíticos com múltiplas responsabilidades. O que torna o código mais simples de se compreender.")]),e._v(" "),a("li",[e._v("Também força a escrever apenas código de produção para passar nos testes baseados em requerimentos de usuário.")])])]),e._v(" "),a("li",[a("p",[e._v("Confiança para Refatorar:")]),e._v(" "),a("ul",[a("li",[e._v("Se você refatora um código, existem possibilidades de que ele quebre, logo, possuindo um grupo de testes automatizados, é possível consertar e estes erros antes do lançamento. Avisos apropriados serão dados caso falhas encontradas durante testes automatizadas sejam implementadas.")]),e._v(" "),a("li",[e._v("O uso do TDD resulta em código mais rápido e extensivel, com menos bugs e que pode ser atualizado com riscos mínimos.")])])]),e._v(" "),a("li",[a("p",[e._v("Apropriado para Trabalho em Equipe:")]),e._v(" "),a("ul",[a("li",[e._v("Na ausência de qualquer membro do time, outro integrante pode facilmente assumir o trabalho no código, auxiliando o compartilhamento de conhecimento e aumentando a produtividade geral da equipe.")])])]),e._v(" "),a("li",[a("p",[e._v("Bom para Desenvolvedores:")]),e._v(" "),a("ul",[a("li",[e._v("Embora desenvolvedores tenham de passar mais tempo ao escrever casos de teste TDD, leva muito menos tempo para realizar o processo de Debugging e desenvolver novas features. Você pode escrever um código mais limpo e simples.")])])])])])}),[],!1,null,null,null);a.default=i.exports}}]);